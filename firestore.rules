
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isOwnUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      // This requires that a user can read their own user document to check the 'role' field.
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isHotelOwner(hotelId) {
      return isAuth() && get(/databases/$(database)/documents/hotels/$(hotelId)).data.ownerId == request.auth.uid;
    }

    // Collection rules
    match /users/{userId} {
      // A user can get their own doc. An admin can get any doc.
      // This 'get' permission is also what allows the isAdmin() function to work.
      allow get: if isOwnUser(userId) || isAdmin();
      
      // Only admins can list all users.
      allow list: if isAdmin();
      
      // Anyone can create a user (signup).
      allow create: if true;
      
      // A user can update their own doc. An admin can update any doc.
      allow update: if isOwnUser(userId) || isAdmin();
      
      // No deletes for now.
      allow delete: if false;
    }

    match /hotels/{hotelId} {
      // Anyone can read public hotel data.
      allow get: if true;
      // Anyone can list hotels. The client-side query is responsible for filtering (e.g., for 'isOpen').
      allow list: if true;

      // An owner can create their hotel. Admin can too.
      allow create: if isAuth() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isAdmin() || isHotelOwner(hotelId);
      // No deletes for now.
      allow delete: if false;
      
      match /rooms/{roomId} {
        // Anyone can read room data.
        allow read: if true;
        // Only owner or admin can write.
        allow write: if isAdmin() || isHotelOwner(hotelId);
      }
      
      match /menuItems/{menuItemId} {
        // Anyone can read menu items.
        allow read: if true;
        // Only owner or admin can write.
        allow write: if isAdmin() || isHotelOwner(hotelId);
      }
    }
    
    match /orders/{orderId} {
        // Customer who created it or admin can get it.
        allow get: if isAdmin() || (isAuth() && resource.data.customerId == request.auth.uid);
        // A customer can list their own orders. An admin can list all.
        // The query from the client MUST contain `where('customerId', '==', request.auth.uid)`
        allow list: if isAuth();
        // Only authenticated customers can create orders for themselves.
        allow create: if isAuth() && request.resource.data.customerId == request.auth.uid;
        // No updates/deletes for now.
        allow update, delete: if false;
    }

    match /withdrawals/{withdrawalId} {
        // Owner who created it or admin can get it.
        allow get: if isAdmin() || (isAuth() && resource.data.ownerId == request.auth.uid);
        // Only admins can list all withdrawals.
        allow list: if isAdmin();
        // Only an owner can create a request for themselves.
        allow create: if isAuth() && request.resource.data.ownerId == request.auth.uid;
        // Only admins can update (approve/deny).
        allow update: if isAdmin();
        // No deletes for now.
        allow delete: if false;
    }
  }
}
