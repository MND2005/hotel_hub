
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(hotelId) {
      return request.auth != null && exists(/databases/$(database)/documents/hotels/$(hotelId)) &&
             get(/databases/$(database)/documents/hotels/$(hotelId)).data.ownerId == request.auth.uid;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
    }

    match /hotels/{hotelId} {
      allow read: if (resource.data.isOpen == true) || isOwner(hotelId) || (request.auth != null && getUserRole() == 'admin');
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update: if isOwner(hotelId) || (request.auth != null && getUserRole() == 'admin');

      match /rooms/{roomId} {
        allow read: if true;
        allow create, update, delete: if isOwner(hotelId);
      }

      match /menuItems/{menuItemId} {
        allow read: if true;
        allow create, update, delete: if isOwner(hotelId);
      }
    }

    match /orders/{orderId} {
        // Stripe webhook creates orders, so it's an unauthenticated request.
        // The webhook endpoint is secured by verifying the Stripe signature.
        allow create: if true;
        
        // A customer can read their own orders. An owner can read orders for their hotel. An admin can read any order.
        allow read: if request.auth != null && (
            resource.data.customerId == request.auth.uid || isOwner(resource.data.hotelId) || getUserRole() == 'admin'
        );

        // Orders are immutable
        allow update, delete: if false; 
    }

    match /withdrawals/{withdrawalId} {
      function isWithdrawalOwner() {
        return request.auth != null && resource.data.ownerId == request.auth.uid;
      }
      
      allow read, list: if isWithdrawalOwner() || (request.auth != null && getUserRole() == 'admin');
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update: if request.auth != null && getUserRole() == 'admin';
    }
  }
}
