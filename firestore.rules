
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check the role of the currently authenticated user.
    function getUserRole() {
      // Ensure the user is authenticated before trying to read their role.
      if (request.auth == null) {
        return 'guest';
      }
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isRequestingUser(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // --- USER DATA ---
    match /users/{userId} {
      // Admins can read any user profile.
      // Users can only read their own profile.
      allow read: if getUserRole() == 'admin' || isRequestingUser(userId);
      
      // Users can create their own profile upon signup.
      allow create: if isRequestingUser(userId);
      
      // No one can update or delete user profiles for now.
      allow update, delete: if false;
    }

    // --- HOTEL DATA ---
    match /hotels/{hotelId} {
      // Anyone can read a hotel's details (for customer browsing).
      allow get: if true;
      
      // Only admins and owners can list multiple hotels.
      allow list: if getUserRole() == 'admin' || getUserRole() == 'owner';

      // Admins and the specific hotel owner can update a hotel.
      allow create: if getUserRole() == 'owner' && isRequestingUser(request.resource.data.ownerId);
      allow update: if getUserRole() == 'admin' || isRequestingUser(resource.data.ownerId);
      allow delete: if false;
      
      // --- Subcollections: ROOMS and MENUITEMS ---
      match /{subcollection}/{itemId} {
        // Anyone can view rooms and menu items.
        allow read: if true;

        // Only the hotel owner or an admin can manage rooms and menu.
        allow write: if getUserRole() == 'admin' || isRequestingUser(get(/databases/$(database)/documents/hotels/$(hotelId)).data.ownerId);
      }
    }
    
    // --- ORDERS ---
    match /orders/{orderId} {
      // Only the customer who placed the order, the relevant hotel owner, or an admin can read it.
      allow read: if getUserRole() == 'admin' 
                   || isRequestingUser(resource.data.customerId) 
                   || isRequestingUser(resource.data.ownerId);
      
      // Orders are created by the Stripe webhook, which is unauthenticated.
      // This rule is intentionally open for the webhook to function.
      // In a production app, this would be replaced by a Cloud Function with a secret URL.
      allow create: if true;
      
      // No one can update or delete orders through the client.
      allow update, delete: if false;
    }

    // --- WITHDRAWALS ---
    match /withdrawals/{withdrawalId} {
      // Admins can read all withdrawal requests.
      // Owners can only read their own requests.
      allow read: if getUserRole() == 'admin' || isRequestingUser(resource.data.ownerId);

      // Owners can create their own withdrawal requests.
      allow create: if getUserRole() == 'owner' && isRequestingUser(request.resource.data.ownerId);

      // ONLY Admins can update a withdrawal request (to approve or deny it).
      allow update: if getUserRole() == 'admin';

      // No one can delete a withdrawal request.
      allow delete: if false;
    }
  }
}
