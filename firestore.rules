
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    match /users/{userId} {
      allow read, write: if isAuthenticated() && (getUserData(request.auth.uid).role == 'admin' || request.auth.uid == userId);
    }

    match /hotels/{hotelId} {
      allow read: if resource.data.isOpen == true;
      allow read, write: if isAuthenticated() && getUserData(request.auth.uid).role == 'admin';
      allow create: if isAuthenticated() && getUserData(request.auth.uid).role == 'owner';
      allow read, update, delete: if isAuthenticated() && request.auth.uid == resource.data.ownerId;
    }
    
    match /hotels/{hotelId}/{collection}/{documentId} {
        allow read: if get(/databases/$(database)/documents/hotels/$(hotelId)).data.isOpen == true;
        allow read, write: if isAuthenticated() && (getUserData(request.auth.uid).role == 'admin' || request.auth.uid == get(/databases/$(database)/documents/hotels/$(hotelId)).data.ownerId);
    }

    match /orders/{orderId} {
      // The webhook can create orders
      allow create: if true;
      
      // An admin, the customer, or the hotel owner can read the order
      allow read: if isAuthenticated() && 
                    (getUserData(request.auth.uid).role == 'admin' || 
                     request.auth.uid == resource.data.customerId || 
                     request.auth.uid == resource.data.ownerId);
    }

    match /withdrawals/{withdrawalId} {
        allow read, write: if isAuthenticated() && getUserData(request.auth.uid).role == 'admin';
        allow create: if isAuthenticated() && getUserData(request.auth.uid).role == 'owner';
        allow read: if isAuthenticated() && request.auth.uid == resource.data.ownerId;
    }
  }
}
