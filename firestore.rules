rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read/write their own data, but admins can read any.
    match /users/{userId} {
      allow read: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow write: if request.auth.uid == userId;
      allow list: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Hotels can be read by anyone.
    // They can only be written by the owner or an admin.
    match /hotels/{hotelId} {
      allow read;
      allow write: if request.auth != null && (request.auth.uid == resource.data.ownerId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      // Subcollections for rooms and menu items inherit read permissions
      // and have the same write restrictions as the parent hotel.
      match /{subcollection}/{docId} {
         allow read;
         allow write: if request.auth != null && (request.auth.uid == get(/databases/$(database)/documents/hotels/$(hotelId)).data.ownerId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      }
    }

    // Orders
    match /orders/{orderId} {
      // IMPORTANT: Allow unauthenticated 'create' for the Stripe webhook.
      // This is secured by the webhook signature check in the API route.
      allow create: if request.auth == null;
      
      // Allow read/list only by the customer, hotel owner, or an admin.
      // This supports the getOrdersByCustomer and getOrdersByHotelOwner queries.
      allow read, list: if request.auth != null && 
        (request.auth.uid == resource.data.customerId || 
         request.auth.uid == resource.data.ownerId || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      // Allow update only by the owner or an admin (e.g., to change status).
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.ownerId || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      // Orders cannot be deleted from the client.
      allow delete: if false;
    }
    
    // Withdrawals
    match /withdrawals/{withdrawalId} {
       // Only the owner can create a request.
       allow create: if request.auth.uid == request.resource.data.ownerId;
       
       // Only the owner or an admin can read.
       allow read, list: if request.auth.uid == resource.data.ownerId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

       // Only an admin can update (approve/deny).
       allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
