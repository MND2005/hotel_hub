rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Allow admins to do anything
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Allow logged-in users to read their own profile
    match /users/{userId} {
      allow get: if request.auth.uid == userId || isAdmin();
      allow list: if isAdmin();
      allow update: if request.auth.uid == userId || isAdmin();
    }

    // Hotels
    match /hotels/{hotelId} {
      // Any authenticated user can read hotel data that is open
      allow get: if request.auth != null && (resource.data.isOpen == true || isAdmin());
      // Only show open hotels in lists, except for admins
      allow list: if request.auth != null && (resource.data.isOpen == true || isAdmin());
      
      // Only owners or admins can write to hotels
      allow write: if (request.auth.uid == resource.data.ownerId || isAdmin());
      // Anyone can create a hotel
      allow create: if request.auth != null;
    }
    
    // Rooms and Menu Items (subcollections of hotels)
    match /hotels/{hotelId}/{subcollection}/{itemId} {
       // Anyone can read rooms/menu items of an open hotel
      allow get: if request.auth != null && (get(/databases/$(database)/documents/hotels/$(hotelId)).data.isOpen == true || isAdmin());
      allow list: if request.auth != null && (get(/databases/$(database)/documents/hotels/$(hotelId)).data.isOpen == true || isAdmin());
      
      // Only owners or admins can write to their hotel's subcollections
      allow write: if (request.auth.uid == get(/databases/$(database)/documents/hotels/$(hotelId)).data.ownerId || isAdmin());
    }
    
    // Orders
    match /orders/{orderId} {
      // A customer can read their own single order. Admins can read any order.
      allow get: if request.auth.uid == resource.data.customerId || isAdmin();
      
      // A customer can query for their own orders.
      allow list: if request.auth.uid != null;
      
      // Allow order creation from the backend webhook.
      allow create: if request.resource.data.customerId is string;
      
      // Orders are immutable by clients.
      allow update, delete: if false;
    }
    
     // Withdrawals
    match /withdrawals/{withdrawalId} {
        // Only owner and admins can read.
        allow get: if request.auth.uid == resource.data.ownerId || isAdmin();
        allow list: if isAdmin(); // Only admins can list all.
        allow create: if request.auth.uid == request.resource.data.ownerId;
        allow update, delete: if isAdmin();
    }
  }
}
