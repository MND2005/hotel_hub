rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is an admin
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the UID matches the authenticated user
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Helper function to check if only rating-related fields are being updated on a hotel.
    function isRatingUpdate() {
        // The update is allowed if ONLY 'avgRating' is being updated (for an edit)
        let isEdit = request.resource.data.diff(resource.data).affectedKeys().hasOnly(['avgRating']);
        // OR if ONLY 'avgRating' and 'reviewCount' are being updated (for a new review)
        let isNew = request.resource.data.diff(resource.data).affectedKeys().hasOnly(['avgRating', 'reviewCount']);
        return request.auth != null && (isEdit || isNew);
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read: if isAdmin() || isOwner(userId);
      // User can create their own user document upon signup.
      allow create: if isOwner(userId);
      // A user can only update their own name.
      allow update: if isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name']);
      // A user can delete their own account.
      allow delete: if isOwner(userId);
    }

    // Rules for the 'hotels' collection and its subcollections
    match /hotels/{hotelId} {
      allow read: if isAdmin() || resource.data.isOpen == true || (request.auth != null && isOwner(resource.data.ownerId));
      allow create: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner' && isOwner(request.resource.data.ownerId);
      allow update: if isAdmin() || isOwner(resource.data.ownerId) || isRatingUpdate();
      allow delete: if isOwner(resource.data.ownerId);

      // Rules for rooms within a hotel
      match /rooms/{roomId} {
        allow read: if true;
        allow create, update, delete: if isOwner(get(/databases/$(database)/documents/hotels/$(hotelId)).data.ownerId);
      }

      // Rules for menu items within a hotel
      match /menuItems/{menuItemId} {
        allow read: if true;
        allow create, update, delete: if isOwner(get(/databases/$(database)/documents/hotels/$(hotelId)).data.ownerId);
      }

      // Rules for reviews within a hotel
      match /reviews/{reviewId} {
        allow read: if true;
        // The user can create a review for themselves (reviewId is userId)
        allow create: if isOwner(reviewId) && request.resource.data.customerId == request.auth.uid;
        // The user can update their own review, but cannot change the customerId
        allow update: if isOwner(reviewId) && request.resource.data.customerId == resource.data.customerId;
        // Only an admin can delete a review.
        allow delete: if isAdmin();
      }
    }
    
    // Allow admins to list all reviews from any hotel
    match /{path=**}/reviews/{reviewId} {
        allow read: if isAdmin();
    }

    // Rules for the 'orders' collection
    match /orders/{orderId} {
      // Webhook has full access (no auth context)
      allow create: if request.auth == null;
      allow read: if isAdmin() || isOwner(resource.data.customerId) || isOwner(resource.data.ownerId);
      allow update: if isOwner(resource.data.ownerId);
      allow delete: if false;
    }

    // Rules for the 'withdrawals' collection
    match /withdrawals/{withdrawalId} {
      allow create: if isOwner(request.resource.data.ownerId);
      allow read: if isAdmin() || isOwner(resource.data.ownerId);
      allow update: if isAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'processedDate']);
      allow delete: if false;
    }
  }
}
