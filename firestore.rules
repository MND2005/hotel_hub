rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(hotelId) {
      return request.auth.uid == get(/databases/$(database)/documents/hotels/$(hotelId)).data.ownerId;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read, update: if request.auth.uid == userId || isAdmin();
      allow create: if request.auth.uid != null;
    }

    match /hotels/{hotelId} {
        allow read: if true; // Hotels are public
        allow create: if request.auth.uid != null && request.resource.data.ownerId == request.auth.uid;
        allow update, delete: if isOwner(hotelId) || isAdmin();

        match /{subcollection}/{itemId} {
            allow read: if true;
            allow create, update, delete: if isOwner(hotelId) || isAdmin();
        }
    }

    // Webhook will use Admin SDK to bypass rules for creation.
    // Customers can read their own orders.
    // Owners can read orders for their hotels.
    // Admins can read all orders.
    match /orders/{orderId} {
      allow create: if false; // No direct client creation
      allow read: if isAdmin() || 
                     (request.auth.uid == resource.data.customerId) ||
                     (request.auth.uid == resource.data.ownerId);
      allow update: if isAdmin() || (request.auth.uid == resource.data.ownerId); // Owner can update status
      allow delete: if isAdmin();
    }
    
    match /withdrawals/{withdrawalId} {
        allow read, write: if isAdmin();
        allow create: if request.auth.uid != null && request.resource.data.ownerId == request.auth.uid;
    }
  }
}
