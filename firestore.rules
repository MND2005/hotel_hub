rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the requesting user is an admin
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the UID matches the authenticated user
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Helper function to verify that only rating-related fields are being updated on a hotel document.
    // This is used for review submission transactions.
    function isRatingUpdate() {
      let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
      // Case 1: A new review is being created, updating both avgRating and reviewCount.
      let isCreatingReview = changedKeys.size() == 2 && changedKeys.hasAll(['avgRating', 'reviewCount']);
      // Case 2: An existing review is being edited, updating only avgRating.
      let isEditingReview = changedKeys.size() == 1 && changedKeys.has('avgRating');
      return isCreatingReview || isEditingReview;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read: if isAdmin() || isOwner(userId);
      // A user can only create their own user document upon signup.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name']);
      allow delete: if isOwner(userId);
    }

    // Rules for the 'hotels' collection and its subcollections
    match /hotels/{hotelId} {
      allow read: if isAdmin() || isOwner(resource.data.ownerId) || resource.data.isOpen == true;
      allow create: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner' && isOwner(request.resource.data.ownerId);
      allow update: if isAdmin() || isOwner(resource.data.ownerId) || (request.auth != null && isRatingUpdate());
      allow delete: if isAdmin() || isOwner(resource.data.ownerId);
      
      match /rooms/{roomId} {
        allow read: if get(/databases/$(database)/documents/hotels/$(hotelId)).data.isOpen == true || isOwner(get(/databases/$(database)/documents/hotels/$(hotelId)).data.ownerId) || isAdmin();
        allow create, update, delete: if isOwner(get(/databases/$(database)/documents/hotels/$(hotelId)).data.ownerId);
      }
      
      match /menuItems/{menuItemId} {
        allow read: if get(/databases/$(database)/documents/hotels/$(hotelId)).data.isOpen == true || isOwner(get(/databases/$(database)/documents/hotels/$(hotelId)).data.ownerId) || isAdmin();
        allow create, update, delete: if isOwner(get(/databases/$(database)/documents/hotels/$(hotelId)).data.ownerId);
      }
      
      match /reviews/{reviewId} {
        allow read: if true;
        // A customer can create/update their own review (reviewId must match customerId).
        allow create, update: if isOwner(reviewId);
        allow delete: if isAdmin();
      }
    }
    
    // This allows an admin to get a list of all reviews from all hotels.
    match /{path=**}/reviews/{reviewId} {
      allow list: if isAdmin();
    }

    // Rules for the 'orders' collection
    match /orders/{orderId} {
      allow create: if request.auth == null; // For Stripe Webhook
      allow read: if isAdmin() || isOwner(resource.data.customerId) || isOwner(resource.data.ownerId);
      allow update: if isOwner(resource.data.ownerId);
      allow delete: if false;
    }

    // Rules for the 'withdrawals' collection
    match /withdrawals/{withdrawalId} {
      allow create: if isOwner(request.resource.data.ownerId);
      allow read: if isAdmin() || isOwner(resource.data.ownerId);
      allow update: if isAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'processedDate']);
      allow delete: if false;
    }
  }
}
