rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }
    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    function isRole(role) {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    function isHotelOwner(hotelId) {
      return isUser(get(/databases/$(database)/documents/hotels/$(hotelId)).data.ownerId);
    }

    // --- Collection Rules ---
    match /users/{userId} {
      allow read, update: if isUser(userId);
      allow create: if isAuth();
    }

    match /hotels/{hotelId} {
      // Authenticated users can read hotels.
      allow read: if isAuth();
      // Users with the 'owner' role can create hotels.
      allow create: if isRole('owner');
      // The user who owns the hotel can update or delete it.
      allow update, delete: if isUser(resource.data.ownerId);

      // --- Subcollection Rules ---
      match /rooms/{roomId} {
        allow read: if isAuth();
        // The owner of the parent hotel can write to the rooms subcollection.
        allow write: if isHotelOwner(hotelId);
      }
      
      match /menuItems/{menuItemId} {
        allow read: if isAuth();
        // The owner of the parent hotel can write to the menuItems subcollection.
        allow write: if isHotelOwner(hotelId);
      }
    }
  }
}
